---

# AI TestMate API Server

replicaCount: 2

image:
  repository: artifactoryspb.epam.com/epm-eag-docker/aitestmate/api
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []

# This is to override the chart name.
nameOverride: "aitestmate-api"
fullnameOverride: "aitestmate-api"

env:
  # -- host for database connection
  - name: ELASTICSEARCH_HOST
    value: http://aitestmate-elasticsearch-headless:9200
  # -- user for database connection
  - name: ELASTICSEARCH_USER
    valueFrom:
      secretKeyRef:
        name: aitestmate-elasticsearch-secret
        key: username
  # -- password for database connection
  - name: ELASTICSEARCH_PASSWORD
    valueFrom:
      secretKeyRef:
        name: aitestmate-elasticsearch-secret
        key: password
  # -- host for rabbitmq connection
  - name: RABBITMQ_HOST
    value: aitestmate-rabbitmq-headless
  # -- port for rabbitmq connection
  - name: RABBITMQ_PORT
    value: "5672"
  # -- user for rabbitmq connection
  - name: RABBITMQ_USER
    valueFrom:
      secretKeyRef:
        name: aitestmate-rabbitmq-secret
        key: username
  # -- password for rabbitmq connection
  - name: RABBITMQ_PASSWORD
    valueFrom:
      secretKeyRef:
        name: aitestmate-rabbitmq-secret
        key: password
  # -- vhost for rabbitmq connection
  - name: RABBITMQ_VHOST
    valueFrom:
      secretKeyRef:
        name: aitestmate-rabbitmq-secret
        key: vhost
  # -- host for redis connection
  - name: REDIS_HOST
    value: aitestmate-redis-headless
  # -- password for redis connection
  - name: REDIS_PASSWORD
    valueFrom:
      secretKeyRef:
        name: aitestmate-redis-secret
        key: password
  # -- log level
  - name: AITESTMATE_LOGLEVEL
    value: INFO

  # Langfuse observability
  # - name: LANGFUSE_HOST
  #   value: https://langfuse.example.com
  # - name: LANGFUSE_SSL_VERIFY
  #   value: "false"
  # - name: LANGFUSE_PUBLIC_KEY
  #   value: pk-lf-12312312-1231-1231-1231-123123123123
  # - name: LANGFUSE_SECRET_KEY
  #   value: sk-lf-12312312-1231-1231-1231-123123123123

  # -- use standalone embeddings (see aitestmate-embeddings chart)
  - name: USE_EMBEDDINGS_HTTP_API
    value: "true"
  # -- embeddings endpoint to use (see aitestmate-embeddings chart)
  - name: EMBEDDINGS_LLM_BASE_URL
    value: http://aitestmate-embeddings:7070

  # - name: CODEMIE_BASE_URL
  #   value: https://codemie.example.com/code-assistant-api
  # - name: CODEMIE_IGNORE_SSL_ERRORS
  #   value: "true"
  # - name: CODEMIE_CLIENT_ID
  #   value: aitm-client-id
  # - name: CODEMIE_CLIENT_SECRET
  #   value: very-secret
  # - name: CODEMIE_PRINCIPAL_ID
  #   value: service-account-testmate
  # - name: CODEMIE_KEY_ID
  #   value: codemiekeyid

  # - name: API_CORS_ORIGINS
  #   value: "https://dev.aitestmate.example.local"
  # - name: API_AUTH_OPENID_REDIRECT_URI
  #   value: "https://dev.aitestmate.example.local/sso-callback"
  # - name: API_AUTH_OPENID_URL_BASE
  #   value: https://keycloak.example.local/auth/realms/codemie-prod/protocol/openid-connect/
  # - name: API_AUTH_OPENID_METADATA_URL
  #   value: https://keycloak.example.local/auth/realms/codemie-prod/.well-known/openid-configuration
  # - name: API_AUTH_OPENID_CLIENT_ID
  #   value: codemie-preview

  # -- encryption configuration
  # - name: KMS_KEY_RING_ID
  #   value: google-ring-id

  # - name: SMTP_HOST
  #   value: smtp-server.cluster.svc.local
  # - name: SMTP_PORT
  #   value: "9999"
  # - name: SMTP_USER
  #   value: mailer
  # - name: SMTP_PASSWORD
  #   value: withoutpassword
  # - name: SMTP_FROM_EMAIL
  #   value: ai_testmate@example.com

# -- Additional environment passed into container
extraEnv: []

serviceAccount:
  annotations: {}

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8280

# @ignore -- not implemented yet
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe: {}
  # httpGet:
  #   path: /
  #   port: http
readinessProbe:
  # httpGet:
  #   path: /
  #   port: http

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
